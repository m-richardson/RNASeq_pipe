#!/usr/bin/env bash
#RNASeq_pipe

#### some initial declarations ####
Options=$@
Optnum=$#
Version=0.3

function _usage {
cat << EOF
RNASeq_pipe v$Version: An automated RNA-Seq analysis pipeline

Usage: RNASeq_pipe <[options]>        
     Options:
	-h         --help           show this helpful help message

     Required:
        -i         --in             input - path to DIR containing raw read sample files
        			    -both fastq and gzipped fastq.gz files are supported
				    -we will auto detect which ones you have
	-r         --ref            reference genome/transcriptome (fasta)
        -a         --annotations    reference genome/transcriptome annotations (gtf or gff)
	-l         --library        specify if your samples are single or paired ended
			            -either SE (single) or PE (paired) 
        -o	   --output         output directory - specify full path
	
     Optional:
	--cluster                   run pipeline on the cluster (Default: no)
        --debug			    debug pipeline
        --version		    print version info    
	--trimmomatic=		    specify version of trimmomatic (Default: 0.33) 
				    -numerical format only i.e --trimmomatic=0.33

Pipeline Steps:
1) Raw read quality filtering and adapter trimming
2) Build your genome index
3) STAR 2-pass mapping to your reference genome of choice
4) quantify expression - i.e gets counts

Examples:
Run the pipeline on a single machine:

    RNASeq_pipe -i input_data_dir -r ref.fa -a annotations.gff -l PE -o output_dir

Run the pipleine utalising a cluster - will run samples in parallel. Currently this program
has only been tested on SGE, but will a small manual modification is portable to others

    RNASeq_pipe -i input_data_dir -r ref.fa -a annotations.gff -l PE -o output_dir --cluster

RNASeq_pipe $Options

If you have any issues please lodge one on our github: https://github.com/m-richardson/RNASeq_pipe.git
EOF
exit -1
}

function _operation {
cat << EOF
RNASeq_pipe v$Version: An automated RNA-Seq analysis pipeline

Usage: RNASeq_pipe -i input_data_dir -r ref.fa -a annotations.gff -l PE -o output_dir

for more details see the extended help with: --help

If you have any issues please lodge one on our github: https://github.com/m-richardson/RNASeq_pipe.git

$*
EOF
exit -1
}

function _version {
cat << EOF
You are using RNASeq_pipe v$Version

Usage: RNASeq_pipe -i input_data_dir -r ref.fa -a annotations.gff -l PE -o output_dir

for more details see the extended help with: --help

If you have any issues please lodge one on our github: https://github.com/m-richardson/RNASeq_pipe.git
EOF
exit -1
}

#### parse command line args ####

TEMP=`getopt -o hi:r:a:l:o: --long help,in:,ref:,annotations:,library:,output:,cluster,debug,version,trimmomatic:: -n 'RNASeq_pipe' -- "$@"`

if [ $# = 0 ]; then _operation "ERROR: no options given "; fi

# Note the quotes around `$TEMP': they are essential!
eval set -- "$TEMP"

in=
ref=
ann=
lib=
out=
cluster=false
debug=false
ver=false
tv=0.33
while true; do
  case "$1" in
    -h ) _operation; shift ;;
    -i | --in ) in="$2"; shift 2 ;;
    -r | --ref ) ref="$2"; shift 2 ;;
    -a | --annotations ) ann="$2"; shift 2 ;;
    -l | --library ) lib="$2"; shift 2 ;;
    -o | --output ) out="$2"; shift 2 ;;
    --trimmomatic)
	case "$2" in
	    "") tv='0.33'; shift 2 ;;
	    *) tv="$2"; shift 2 ;;
	esac ;;
    --help ) _usage; shift ;;
    --cluster ) cluster=true; shift ;;    
    --debug ) debug=true; shift ;;
    --version ) ver=true; shift ;;
    -- ) shift; break ;;
    * ) _operation "ERROR: invalid options"; exit 1 ;;
  esac
done

#### set debugging if selected ####

if [ $debug == true ]; then
	set -xv
fi

#### print version info ####

if [ $ver == true ]; then
        _version
fi

#### check that the required cmd line args are given ###
if [ "X" = "X$in" ]; then
  echo "ERROR: Please specify a raw data directory" >&2
  echo
  _operation
  exit 1
fi
if [ "X" = "X$ref" ]; then
  echo "ERROR: Please specify a reference genome/transcriptome" >&2  
  echo
  _operation
  exit 1
fi
if [ "X" = "X$ann" ]; then
  echo "ERROR: Please specify reference annotations" >&2
  echo
  _operation
  exit 1
fi
if [ "X" = "X$lib" ]; then
  echo "ERROR: Please specify library type" >&2
  echo
  _operation
  exit 1
fi
if [ "X" = "X$out" ]; then
  echo "ERROR: Please specify output directory" >&2
  echo
  _operation
  exit 1
fi

if [ $lib == SE ] || [ $lib == PE ]; then
    echo 
else
    echo "ERROR: incorrect -l/--library parameter specified: Please use SE or PE" >&2
    echo
    _operation
    exit 1
fi

#### lets just make sure the programs needed exist in PATH and are executable ####

if ! [ -x "$(command -v STAR)" ]; then
	echo "STAR is not installed, or accessable in your PATH" >&2
	exit 1
fi
if ! [ -x "$(command -v trimmomatic-$tv'.jar')" ]; then
        echo "trimmomatic is not installed, or accessable in your PATH" >&2
	exit 1
fi

##### DO WE WANT TO ADD IN VERSION CHECK ???

#### then define their full PATHs and modify PATH to the adapters #### 

STAR=$(command -v STAR)
TRIMO=$(command -v trimmomatic-$tv'.jar')
ADAPTs=$(command -v trimmomatic-$tv'.jar' | sed 's+trimmomatic-'$tv'.jar+adapters/TruSeq3-SE.fa+')
ADAPTp=$(command -v trimmomatic-$tv'.jar' | sed 's+trimmomatic-'$tv'.jar+adapters/TruSeq3-PE.fa+')

#### Pipeline components ####
###$ Options for the pipeline ####

OUT=$out
DATA=$in
OUTtrim=$OUT/trimmed_files
OUTaln=$OUT/STAR_aln
GENOME=$ref
ANNOTS=$ann
GENOMEdir=$OUT/genome
LIB=$lib

#### Auto check to see if we have *.fastq or *.fastq.gz raw data files

suf=
fq="$(ls $DATA'/'* | head -n 1 | awk '{print $1}' | sed 's@.*/@@')"

if [[ $fq == *.gz ]]; then
  suf=.fastq.gz
elif [[ $fq == *.fastq ]]; then
  suf=.fastq
else
  echo "Could not detect raw read input" >&2
  exit 1
fi

#### functions ####
# fastq.gz code blocks
function _SEsZ {
for i in $DATA/*_1$suf; do
        nf=$(basename $i _1.fastq.gz)
        echo "working with $nf"
        echo $OUTaln/$nf/Log.final.out >> $OUTaln/index
        java -jar $TRIMO SE -threads 12 -phred33 -trimlog $OUTtrim/"${nf}.trimlog" $DATA/${nf}'_1'$suf $OUTtrim/${nf}'_1_trim'$suf ILLUMINACLIP:$ADAPTs:2:30:10:4 SLIDINGWINDOW:5:20 AVGQUAL:20 MINLEN:36
        mkdir $OUTaln/${nf} 
        cd $OUTaln/${nf} 
        $STAR --twopassMode Basic --genomeDir $GENOMEdir --readFilesIn $OUTtrim/${nf}'_1_trim'$suf --readFilesCommand zcat --runRNGseed 777 --outFileNamePrefix "${nf}_" --outSAMtype BAM Unsorted SortedByCoordinate --quantMode TranscriptomeSAM GeneCounts --runThreadN 12
	cd ..
done
}

function _PEsZ {
for i in $DATA/*_1$suf; do
        nf=$(basename $i _1.fastq.gz)
        echo "working with $nf"
        echo $OUTaln/$nf/Log.final.out >> $OUTaln/index
        java -jar $TRIMO PE -threads 12 -phred33 -trimlog $OUTtrim/"${nf}.trimlog" $DATA/${nf}'_1'$suf $DATA/${nf}'_2'$suf $OUTtrim/${nf}'_1_trim'$suf $OUTtrim/${nf}'_1_trim_orph'$suf $OUTtrim/${nf}'_2_trim'$suf $OUTtrim/${nf}'_2_trim_orph'$suf ILLUMINACLIP:$ADAPTp:2:30:10:4 SLIDINGWINDOW:5:20 AVGQUAL:20 MINLEN:36
        mkdir $OUTaln/${nf}
        cd $OUTaln/${nf}
        $STAR --twopassMode Basic --genomeDir $GENOMEdir --readFilesIn $OUTtrim/${nf}'_1_trim'$suf $OUTtrim/${nf}'_2_trim'$suf --readFilesCommand zcat --runRNGseed 777 --outFileNamePrefix "${nf}_" --outSAMtype BAM Unsorted SortedByCoordinate --quantMode TranscriptomeSAM GeneCounts --runThreadN 12
	cd ..
done
}

function _SEZ {
for i in $DATA/*_1$suf; do
	nf=$(basename $i _1.fastq.gz)
	echo "working with $nf"
	echo $OUTaln/$nf/Log.final.out >> $OUTaln/index
	echo "#!/bin/bash" > "${nf}.sh" 	
	echo "source ~/.bash_profile" >> "${nf}.sh"
	echo java -jar $TRIMO SE -threads 12 -phred33 -trimlog $OUTtrim/"${nf}.trimlog" $DATA/${nf}'_1'$suf $OUTtrim/${nf}'_1_trim'$suf ILLUMINACLIP:$ADAPTs:2:30:10:4 SLIDINGWINDOW:5:20 AVGQUAL:20 MINLEN:36 >> "${nf}.sh"
	echo mkdir $OUTaln/${nf} >> "${nf}.sh"
	echo cd $OUTaln/${nf} >> "${nf}.sh"
	echo $STAR --twopassMode Basic --genomeDir $GENOMEdir --readFilesIn $OUTtrim/${nf}'_1_trim'$suf --readFilesCommand zcat --runRNGseed 777 --outFileNamePrefix "${nf}_" --outSAMtype BAM Unsorted SortedByCoordinate --quantMode TranscriptomeSAM GeneCounts --runThreadN 12 >> "${nf}.sh"
	echo exit 0 >> "${nf}.sh"
	qsub -l qname=Virtual "${nf}.sh"
	#cat "${nf}.sh"
	rm "${nf}.sh"
done
}

function _PEZ {
for i in $DATA/*_1$suf; do
        nf=$(basename $i _1.fastq.gz)
        echo "working with $nf"
        echo $OUTaln/$nf/Log.final.out >> $OUTaln/index
        echo "#!/bin/bash" > "${nf}.sh"
        echo "source ~/.bash_profile" >> "${nf}.sh"
        echo java -jar $TRIMO PE -threads 12 -phred33 -trimlog $OUTtrim/"${nf}.trimlog" $DATA/${nf}'_1'$suf $DATA/${nf}'_2'$suf $OUTtrim/${nf}'_1_trim'$suf $OUTtrim/${nf}'_1_trim_orph'$suf $OUTtrim/${nf}'_2_trim'$suf $OUTtrim/${nf}'_2_trim_orph'$suf ILLUMINACLIP:$ADAPTp:2:30:10:4 SLIDINGWINDOW:5:20 AVGQUAL:20 MINLEN:36 >> "${nf}.sh"
        echo mkdir $OUTaln/${nf} >> "${nf}.sh"
        echo cd $OUTaln/${nf} >> "${nf}.sh"
        echo $STAR --twopassMode Basic --genomeDir $GENOMEdir --readFilesIn $OUTtrim/${nf}'_1_trim'$suf $OUTtrim/${nf}'_2_trim'$suf --readFilesCommand zcat --runRNGseed 777 --outFileNamePrefix "${nf}_" --outSAMtype BAM Unsorted SortedByCoordinate --quantMode TranscriptomeSAM GeneCounts --runThreadN 12 >> "${nf}.sh"
	echo exit 0 >> "${nf}.sh"
	qsub -l qname=Virtual "${nf}.sh"
        #cat "${nf}.sh"
        rm "${nf}.sh"
done
}

# unziped fastq code blocks
function _SEsuZ {
for i in $DATA/*_1$suf; do
        nf=$(basename $i _1.fastq)
        echo "working with $nf"
        echo $OUTaln/$nf/Log.final.out >> $OUTaln/index
        java -jar $TRIMO SE -threads 12 -phred33 -trimlog $OUTtrim/"${nf}.trimlog" $DATA/${nf}'_1'$suf $OUTtrim/${nf}'_1_trim'$suf ILLUMINACLIP:$ADAPTs:2:30:10:4 SLIDINGWINDOW:5:20 AVGQUAL:20 MINLEN:36
        mkdir $OUTaln/${nf}
        cd $OUTaln/${nf}
        $STAR --twopassMode Basic --genomeDir $GENOMEdir --readFilesIn $OUTtrim/${nf}'_1_trim'$suf --runRNGseed 777 --outFileNamePrefix "${nf}_" --outSAMtype BAM Unsorted SortedByCoordinate --quantMode TranscriptomeSAM GeneCounts --runThreadN 12
        cd ..
done
}

function _PEsuZ {
for i in $DATA/*_1$suf; do
        nf=$(basename $i _1.fastq)
        echo "working with $nf"
        echo $OUTaln/$nf/Log.final.out >> $OUTaln/index
        java -jar $TRIMO PE -threads 12 -phred33 -trimlog $OUTtrim/"${nf}.trimlog" $DATA/${nf}'_1'$suf $DATA/${nf}'_2'$suf $OUTtrim/${nf}'_1_trim'$suf $OUTtrim/${nf}'_1_trim_orph'$suf $OUTtrim/${nf}'_2_trim'$suf $OUTtrim/${nf}'_2_trim_orph'$suf ILLUMINACLIP:$ADAPTp:2:30:10:4 SLIDINGWINDOW:5:20 AVGQUAL:20 MINLEN:36
        mkdir $OUTaln/${nf}
        cd $OUTaln/${nf}
        $STAR --twopassMode Basic --genomeDir $GENOMEdir --readFilesIn $OUTtrim/${nf}'_1_trim'$suf $OUTtrim/${nf}'_2_trim'$suf --runRNGseed 777 --outFileNamePrefix "${nf}_" --outSAMtype BAM Unsorted SortedByCoordinate --quantMode TranscriptomeSAM GeneCounts --runThreadN 12
        cd ..
done
}

function _SEuZ {
for i in $DATA/*_1$suf; do
        nf=$(basename $i _1.fastq)
        echo "working with $nf"
        echo $OUTaln/$nf/Log.final.out >> $OUTaln/index
        echo "#!/bin/bash" > "${nf}.sh"
        echo "source ~/.bash_profile" >> "${nf}.sh"
        echo java -jar $TRIMO SE -threads 12 -phred33 -trimlog $OUTtrim/"${nf}.trimlog" $DATA/${nf}'_1'$suf $OUTtrim/${nf}'_1_trim'$suf ILLUMINACLIP:$ADAPTs:2:30:10:4 SLIDINGWINDOW:5:20 AVGQUAL:20 MINLEN:36 >> "${nf}.sh"
        echo mkdir $OUTaln/${nf} >> "${nf}.sh"
        echo cd $OUTaln/${nf} >> "${nf}.sh"
        echo $STAR --twopassMode Basic --genomeDir $GENOMEdir --readFilesIn $OUTtrim/${nf}'_1_trim'$suf --runRNGseed 777 --outFileNamePrefix "${nf}_" --outSAMtype BAM Unsorted SortedByCoordinate --quantMode TranscriptomeSAM GeneCounts --runThreadN 12 >> "${nf}.sh"
        echo exit 0 >> "${nf}.sh"
	qsub -l qname=Virtual "${nf}.sh"
        #cat "${nf}.sh"
        rm "${nf}.sh"
done
}

function _PEuZ {
for i in $DATA/*_1$suf; do
        nf=$(basename $i _1.fastq)
        echo "working with $nf"
        echo $OUTaln/$nf/Log.final.out >> $OUTaln/index
        echo "#!/bin/bash" > "${nf}.sh"
        echo "source ~/.bash_profile" >> "${nf}.sh"
        echo java -jar $TRIMO PE -threads 12 -phred33 -trimlog $OUTtrim/"${nf}.trimlog" $DATA/${nf}'_1'$suf $DATA/${nf}'_2'$suf $OUTtrim/${nf}'_1_trim'$suf $OUTtrim/${nf}'_1_trim_orph'$suf $OUTtrim/${nf}'_2_trim'$suf $OUTtrim/${nf}'_2_trim_orph'$suf ILLUMINACLIP:$ADAPTp:2:30:10:4 SLIDINGWINDOW:5:20 AVGQUAL:20 MINLEN:36 >> "${nf}.sh"
        echo mkdir $OUTaln/${nf} >> "${nf}.sh"
        echo cd $OUTaln/${nf} >> "${nf}.sh"
        echo $STAR --twopassMode Basic --genomeDir $GENOMEdir --readFilesIn $OUTtrim/${nf}'_1_trim'$suf $OUTtrim/${nf}'_2_trim'$suf --runRNGseed 777 --outFileNamePrefix "${nf}_" --outSAMtype BAM Unsorted SortedByCoordinate --quantMode TranscriptomeSAM GeneCounts --runThreadN 12 >> "${nf}.sh"
        echo exit 0 >> "${nf}.sh"
	qsub -l qname=Virtual "${nf}.sh"
        #cat "${nf}.sh"
        rm "${nf}.sh"
done
}

# pipeline code blocks

function _init {
mkdir $OUT 2> /dev/null 
sleep 0.1

if [ $? -eq 0 ]; then
  echo "Successfully created output directory"
else
  echo "Could not create output directory" >&2
  exit 1
fi

mkdir $GENOMEdir 2> $OUT/RNASeq_pipe.err
sleep 0.1

if [ $? -eq 0 ]; then
  echo "Successfully created genome directory"
else
  echo "Could not create genome directory" >&2
  cat $OUT/RNASeq_pipe.err
  exit 1
fi

mkdir $OUTtrim 2> $OUT/RNASeq_pipe.err
sleep 0.1

if [ $? -eq 0 ]; then
  echo "Successfully created trimmed data directory"
else
  echo "Could not create trimmed data directory" >&2
  cat $OUT/RNASeq_pipe.err
  exit 1
fi

mkdir $OUTaln 2> $OUT/RNASeq_pipe.err
sleep 0.1

if [ $? -eq 0 ]; then
  echo "Successfully created alignment directory"
else
  echo "Could not create alignment directory" >&2
  cat $OUT/RNASeq_pipe.err
  exit 1
fi

ln $GENOME $GENOMEdir 2> $OUT/RNASeq_pipe.err
sleep 0.1

if [ $? -eq 0 ]; then
  echo "Successfully linked genome"
else
  echo "Could not link genome" >&2
  cat $OUT/RNASeq_pipe.err
  exit 1
fi

ln $ANNOTS $GENOMEdir 2> $OUT/RNASeq_pipe.err
sleep 0.1

if [ $? -eq 0 ]; then
  echo "Successfully linked annotations"
else
  echo "Could not link annotations" >&2
  cat $OUT/RNASeq_pipe.err
  exit 1
fi

touch $OUTaln/index 2> $OUT/RNASeq_pipe.err
sleep 0.25

if [ $? -eq 0 ]; then
  echo "Successfully created sample index file"
else
  echo "Could create sample index file" >&2
  cat $OUT/RNASeq_pipe.err
  exit 1
fi
}

#### check to see if index already exists for the specified reference - if not build

function _index {
ref_file=$(grep 'genomeFastaFiles' $GENOMEdir/genomeParameters.txt | awk '{print $2}' >2 $OUT/RNASeq_pipe.err)
if [ -f $GENOMEdir/Genome ] && [ $GENOME == $ref_file ]; then
       echo "Genome index already built"
       echo "using it instead of rebuilding..."
else
	echo "Could not find genome index"
	echo "Building it from scratch instead..."
        $STAR --runMode genomeGenerate --genomeDir $GENOMEdir --limitGenomeGenerateRAM 81000000000000 --genomeFastaFiles $GENOME --sjdbGTFfile $ANNOTS --runThreadN 12 2> $OUT/STAR-genomeGenerate.err
	  if [ $? -eq 0 ]; then
  	    echo "Successfully built genome index"
	  else
  	    echo "Could not build genome index..." >&2
	    cat $OUT/STAR-genomeGenerate.err;  exit 1
	  fi  
fi
}

#### check on cluster jobs and print complete status

function _jobCheck {

a=$(wc $OUTaln/index | awk '{print $1}') 
while true ; do
       b=$(ls $OUTaln/*/*Log.final.out | wc | awk '{print $1}' 2> $OUT/RNASeq_pipe.err)
       echo $b out of $a files complete
       if (($a == $b))
       then
               break
       else 
               sleep 300
       fi
done
}


#### Start of pipeline ####

echo "
RNASeq_pipe: An automated RNA-Seq analysis pipeline
User options selected:

RNASeq_pipe $Options
"
echo "Initialising..."
echo "Raw reads are *$suf"
_init

echo "Checking for genome index"
_index

#### this section will run the trimming and alignment for each sample on the cluster

if [ $cluster == false ] && [[ $suf == .fastq ]]; then
	if [ $LIB == SE ]; then
          echo "Running pipeline in SE mode on this machine"
	  _SEsuZ
	elif [ $LIB == PE ]; then
          echo "Running pipeline in PE mode on this machine"
	  _PEsuZ
	else
          echo "ERROR: could not submit pipeline jobs - incorrect parameters set" >&2
	  exit 1
	fi
elif [ $cluster == false ] && [[ $suf == .fastq.gz ]]; then
        if [ $LIB == SE ]; then
          echo "Running pipeline in SE mode on this machine"
          _SEsZ
        elif [ $LIB == PE ]; then
          echo "Running pipeline in PE mode on this machine"
          _PEsZ
        else
          echo "ERROR: could not submit pipeline jobs - incorrect parameters set" >&2
	  exit 1
        fi
elif [ $cluster == true ] && [[ $suf == .fastq ]]; then
	if [ $LIB == SE ]; then
          echo "Running pipeline in SE mode on the cluster"
	  _SEuZ
	elif [ $LIB == PE ]; then
          echo "Running pipeline in PE mode on the cluster"
	  _PEuZ
	else
          echo "ERROR: could not submit pipeline jobs - incorrect parameters set" >&2
	  exit 1
	fi
elif [ $cluster == true ] && [[ $suf == .fastq.gz ]]; then
        if [ $LIB == SE ]; then
          echo "Running pipeline in SE mode on the cluster"
          _SEZ
        elif [ $LIB == PE ]; then
          echo "Running pipeline in PE mode on the cluster"
          _PEZ
        else
          echo "ERROR: could not submit pipeline jobs - incorrect parameters set" >&2
          exit 1
        fi
fi

#### if run in cluster mode then wait for jobs to finish and print status updates
if [ $cluster == true ]; then
	_jobCheck
	echo "Tidying up..."
	rm ~/*.sh.*
else
	break
fi

echo "Pipeline finished - check individual Log.final.out files just to make sure" 

exit 0

