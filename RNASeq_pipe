#!/usr/bin/env bash
#RNASeq_pipe

#### some initial declarations ####
Options=$@
Optnum=$#
Version=0.4

function _usage {
cat << EOF
RNASeq_pipe v$Version: An automated RNA-Seq analysis pipeline

Usage: RNASeq_pipe <[options]>        
     Options:
	-h         --help           show this helpful help message

     Required:
        -i         --in             input - FULL path to directory containing raw read sample files
        			    -both fastq and gzipped fastq.gz files are supported
				    -we will auto detect which ones you have
				    -paired end data should follow the *_1.fastq and *_2.fastq convention
	-r         --ref            reference genome/transcriptome (fasta)
        -a         --annotations    reference genome/transcriptome annotations (gff or gtf)
				    -while both gtf and gff are supported the gene ids 
				    -are based on those in the gtf as default
				    -but those in the gff when counts are quantified with Salmon 
	-l         --library        specify if your samples are single or paired ended
			            -either SE (single) or PE (paired) 
        -o	   --output         output directory - specify FULL path
	
     Optional:
	--cluster                   run pipeline on the cluster (Default: no)
        --debug			    debug pipeline
        --version		    print version info    
	--trimmomatic=		    specify version of trimmomatic (Default: 0.33) 
				    -numerical format only i.e --trimmomatic=0.33
	--collate		    collate counts for all samples into a combined matrix
				    -this will produce an m x n matrix of genes (rows) by samples (columns)
				    -counts are gene-level (Default) or transcript-level if --salmon selected
	--salmon		    transcript quantification of counts using the massively-parallel 
				    -stochastic collapsed variational inference algorithm from 
				    -salmon (Prefered method)
				    -NOTE: This only works with a transcriptome reference NOT a genome 
	--transcriptome		    build and map to a transcriptome reference
				    -the supplied genome/transcriptome ref and annotation file are
				    -enough to build this as long as the annotations 
				    -contain the RNAs you are interested in


Pipeline Steps:

1) Raw read quality filtering and adapter trimming with Trimmomatic 
	-currently only Illumina TruSeq v3 chemistry supported, I will add TruSeq v2 shortly
2) Build your genom/transcriptomee index (STAR)
3) STAR 2-pass mapping to your reference genome/transcriptome of choice
4) quantify expression - i.e gets counts
	-this can be done in 2 ways: 
	a) the union exon model (as per HTseq count) implemented in STAR (Default) 
	-suitable for gene-level counts when using a genome reference
	b) transcript-level quantification using Salmon (Optional)
	-suitable only when you map reads against a transcriptome reference
5) collate individual sample counts into a m x n matrix for differential abundance testing (Optional)
	-requires R

Examples:

Run the pipeline on a single machine:

    RNASeq_pipe -i input_data_dir -r ref.fa -a annotations.gtf -l PE -o output_dir

Run the pipeline on a single machine using salmon and producing a collated count matrix

    RNASeq_pipe -i input_data_dir -r transcriptome_ref.fa -a transcriptome_annotations.gtf -l PE \
    -o output_dir --salmon --collate

Run the pipleine utalising a cluster - will run samples in parallel. Currently this program
has only been tested on SGE, but will a small manual modification is portable to others

    RNASeq_pipe -i input_data_dir -r ref.fa -a annotations.gtf -l PE -o output_dir --cluster


RNASeq_pipe $Options

If you have any issues please lodge one on our github: https://github.com/m-richardson/RNASeq_pipe.git
EOF
exit -1
}

function _operation {
cat << EOF
RNASeq_pipe v$Version: An automated RNA-Seq analysis pipeline

for more details and discussion of optional flags see the extended help with: --help
If you have any issues please lodge one on our github: https://github.com/m-richardson/RNASeq_pipe.git

Basic Usage: RNASeq_pipe -i input_data_dir -r ref.fa -a annotations.gtf -l PE -o output_dir

$*
EOF
exit -1
}

function _version {
cat << EOF
You are using RNASeq_pipe v$Version

EOF
exit -1
}

######
# add gtf gff flag, add truseq2 library adaptors also
#####


#### parse command line args ####

TEMP=`getopt -o hi:r:a:l:o: --long help,in:,ref:,annotations:,library:,output:,cluster,collate,salmon,transcriptome,debug,version,trimmomatic:: -n 'RNASeq_pipe' -- "$@"`

if [ $# = 0 ]; then _operation "ERROR: no options given "; fi

# Note the quotes around `$TEMP': they are essential!
eval set -- "$TEMP"

in=
ref=
ann=
lib=
out=
cluster=false
collate=false
salmon=false
transcriptome=false
debug=false
ver=false
tv=0.33
while true; do
  case "$1" in
    -h ) _operation; shift ;;
    -i | --in ) in="$2"; shift 2 ;;
    -r | --ref ) ref="$2"; shift 2 ;;
    -a | --annotations ) ann="$2"; shift 2 ;;
    -l | --library ) lib="$2"; shift 2 ;;
    -o | --output ) out="$2"; shift 2 ;;
    --trimmomatic)
	case "$2" in
	    "") tv='0.33'; shift 2 ;;
	    *) tv="$2"; shift 2 ;;
	esac ;;
    --help ) _usage; shift ;;
    --cluster ) cluster=true; shift ;;    
    --collate ) collate=true; shift ;;
    --salmon ) salmon=true; shift ;;
    --transcriptome ) transcriptome=true; shift ;;
    --debug ) debug=true; shift ;;
    --version ) ver=true; shift ;;
    -- ) shift; break ;;
    * ) _operation "ERROR: invalid options"; exit 1 ;;
  esac
done

#### set debugging if selected ####

if [ $debug == true ]; then
	set -xv
fi

#### print version info ####

if [ $ver == true ]; then
        _version
fi

#### check that the required cmd line args are given ###
if [ "X" = "X$in" ]; then
  echo "ERROR: Please specify a raw data directory" >&2
  echo
  _operation
  exit 1
fi
if [ "X" = "X$ref" ]; then
  echo "ERROR: Please specify a reference genome/transcriptome" >&2  
  echo
  _operation
  exit 1
fi
if [ "X" = "X$ann" ]; then
  echo "ERROR: Please specify reference annotations" >&2
  echo
  _operation
  exit 1
fi
if [ "X" = "X$lib" ]; then
  echo "ERROR: Please specify library type" >&2
  echo
  _operation
  exit 1
fi
if [ "X" = "X$out" ]; then
  echo "ERROR: Please specify output directory" >&2
  echo
  _operation
  exit 1
fi

if [ $lib == SE ] || [ $lib == PE ]; then
    echo 
else
    echo "ERROR: incorrect -l/--library parameter specified: Please use SE or PE" >&2
    echo
    _operation
    exit 1
fi

#### lets just make sure the programs needed exist in PATH and are executable ####

if ! [ -x "$(command -v STAR)" ]; then
	echo "STAR is not installed, or accessable in your PATH" >&2
	exit 1
else
	STAR=$(command -v STAR)
fi
if ! [ -x "$(command -v trimmomatic-$tv'.jar')" ]; then
        echo "Trimmomatic is not installed, or accessable in your PATH" >&2
	exit 1
else
	TRIMO=$(command -v trimmomatic-$tv'.jar')
	ADAPTs=$(command -v trimmomatic-$tv'.jar' | sed 's+trimmomatic-'$tv'.jar+adapters/TruSeq3-SE.fa+')
	ADAPTp=$(command -v trimmomatic-$tv'.jar' | sed 's+trimmomatic-'$tv'.jar+adapters/TruSeq3-PE.fa+')
fi
if ! [ -x "$(command -v gffread)" ]; then
	echo "gffread is not installed, or accessable in your PATH" >&2
	exit 1
else
	GFFREAD=$(command -v gffread)
fi
if [ "$salmon" = "true" ]; then
	if ! [ -x "$(command -v salmon)" ]; then
          echo "You have selected the --salmon option 
	  but Salmon is not installed, or accessable in your PATH" >&2
          exit 1
	else 
	  SALMON=$(command -v salmon)
	fi
fi
if [ "$collate" = "true" ]; then
        if ! [ -x "$(command -v R)" ]; then
          echo "You have selected the --collate option 
          but R is not installed, or accessable in your PATH" >&2
          exit 1
	else 
	  R=$(command -v R)
        fi
fi

#### Pipeline components ####
###$ Options for the pipeline ####

OUT=$out
LOG=$OUT/Logs
DATA=$in
OUTtrim=$OUT/trimmed_files
OUTaln=$OUT/STAR_aln
GENOME=$ref
ANNOTS=$ann
GENOMEdir=$OUT/genome
LIB=$lib

#### Auto check to see if we have *.fastq or *.fastq.gz raw data files

suf=
fq="$(ls $DATA'/'* | head -n 1 | awk '{print $1}' | sed 's@.*/@@')"

if [[ $fq == *.gz ]]; then
  suf=.fastq.gz
elif [[ $fq == *.fastq ]]; then
  suf=.fastq
else
  echo "Could not detect raw read input" >&2
  exit 1
fi

#### functions

# fastq.gz code blocks
function _SEsZ {
for i in $DATA/*_1$suf; do
        nf=$(basename $i _1.fastq.gz)
        echo "working with $nf"
        echo $OUTaln/$nf/Log.final.out >> $OUTaln/index
        java -jar $TRIMO SE -threads 12 -phred33 -trimlog $OUTtrim/"${nf}.trimlog" $DATA/${nf}'_1'$suf $OUTtrim/${nf}'_1_trim'$suf ILLUMINACLIP:$ADAPTs:2:30:10:4 SLIDINGWINDOW:5:20 AVGQUAL:20 MINLEN:36
        mkdir $OUTaln/${nf} 
        cd $OUTaln/${nf} 
        $STAR --twopassMode Basic --genomeDir $GENOMEdir --readFilesIn $OUTtrim/${nf}'_1_trim'$suf --readFilesCommand zcat --runRNGseed 777 --outFileNamePrefix "${nf}_" --outSAMtype BAM Unsorted SortedByCoordinate --quantMode TranscriptomeSAM GeneCounts --runThreadN 12
	if [ "$salmon" == "true" ]; then
        echo "Running Salmon transcript quantification..."
          if [ $LIB == PE ]; then
          slib=IU
          elif [ $LIB == SE ]; then
          slib=U
          fi
          $SALMON quant -t $GENOMEdir/transcriptome.fa -l $slib -a "${nf}_Aligned.out.bam" -o $OUTaln/${nf}/salmon_quant
	  mv $OUTaln/${nf}/salmon_quant/quant.sf $OUTaln/${nf}/salmon_quant/"${nf}_quant.sf"
	fi
	cd ..
done
}

function _PEsZ {
for i in $DATA/*_1$suf; do
        nf=$(basename $i _1.fastq.gz)
        echo "working with $nf"
        echo $OUTaln/$nf/Log.final.out >> $OUTaln/index
        java -jar $TRIMO PE -threads 12 -phred33 -trimlog $OUTtrim/"${nf}.trimlog" $DATA/${nf}'_1'$suf $DATA/${nf}'_2'$suf $OUTtrim/${nf}'_1_trim'$suf $OUTtrim/${nf}'_1_trim_orph'$suf $OUTtrim/${nf}'_2_trim'$suf $OUTtrim/${nf}'_2_trim_orph'$suf ILLUMINACLIP:$ADAPTp:2:30:10:4 SLIDINGWINDOW:5:20 AVGQUAL:20 MINLEN:36
        mkdir $OUTaln/${nf}
        cd $OUTaln/${nf}
        $STAR --twopassMode Basic --genomeDir $GENOMEdir --readFilesIn $OUTtrim/${nf}'_1_trim'$suf $OUTtrim/${nf}'_2_trim'$suf --readFilesCommand zcat --runRNGseed 777 --outFileNamePrefix "${nf}_" --outSAMtype BAM Unsorted SortedByCoordinate --quantMode TranscriptomeSAM GeneCounts --runThreadN 12
	if [ "$salmon" == "true" ]; then
        echo "Running Salmon transcript quantification..."
          if [ $LIB == PE ]; then
          slib=IU
          elif [ $LIB == SE ]; then
          slib=U
          fi
          $SALMON quant -t $GENOME -g $ANNOTS -l $slib -a "${nf}_Aligned.out.bam" -o $OUTaln/${nf}/salmon_quant
          mv $OUTaln/${nf}/salmon_quant/quant.sf $OUTaln/${nf}/salmon_quant/"${nf}_quant.sf"
	fi
	cd ..
done
}

function _SEZ {
for i in $DATA/*_1$suf; do
	nf=$(basename $i _1.fastq.gz)
	echo "working with $nf"
	echo $OUTaln/$nf/Log.final.out >> $OUTaln/index
	echo "#!/bin/bash" > "${nf}.sh" 	
	echo "source ~/.bash_profile" >> "${nf}.sh"
	echo java -jar $TRIMO SE -threads 12 -phred33 -trimlog $OUTtrim/"${nf}.trimlog" $DATA/${nf}'_1'$suf $OUTtrim/${nf}'_1_trim'$suf ILLUMINACLIP:$ADAPTs:2:30:10:4 SLIDINGWINDOW:5:20 AVGQUAL:20 MINLEN:36 >> "${nf}.sh"
	echo mkdir $OUTaln/${nf} >> "${nf}.sh"
	echo cd $OUTaln/${nf} >> "${nf}.sh"
	echo $STAR --twopassMode Basic --genomeDir $GENOMEdir --readFilesIn $OUTtrim/${nf}'_1_trim'$suf --readFilesCommand zcat --runRNGseed 777 --outFileNamePrefix "${nf}_" --outSAMtype BAM Unsorted SortedByCoordinate --quantMode TranscriptomeSAM GeneCounts --runThreadN 12 >> "${nf}.sh"
	if [ "$salmon" == "true" ]; then
          if [ $LIB == PE ]; then
          slib=IU
          elif [ $LIB == SE ]; then
          slib=U
          fi
          echo $SALMON quant -t $GENOMEdir/transcriptome.fa -l $slib -a "${nf}_Aligned.out.bam" -o $OUTaln/${nf}/salmon_quant >> "${nf}.sh"
          echo mv $OUTaln/${nf}/salmon_quant/quant.sf $OUTaln/${nf}/salmon_quant/"${nf}_quant.sf" >> "${nf}.sh"
	fi
	echo exit 0 >> "${nf}.sh"
	qsub -l qname=Virtual "${nf}.sh"
	sleep 0.1
	#cat "${nf}.sh"
	rm "${nf}.sh"
done
}

function _PEZ {
for i in $DATA/*_1$suf; do
        nf=$(basename $i _1.fastq.gz)
        echo "working with $nf"
        echo $OUTaln/$nf/Log.final.out >> $OUTaln/index
        echo "#!/bin/bash" > "${nf}.sh"
        echo "source ~/.bash_profile" >> "${nf}.sh"
        echo java -jar $TRIMO PE -threads 12 -phred33 -trimlog $OUTtrim/"${nf}.trimlog" $DATA/${nf}'_1'$suf $DATA/${nf}'_2'$suf $OUTtrim/${nf}'_1_trim'$suf $OUTtrim/${nf}'_1_trim_orph'$suf $OUTtrim/${nf}'_2_trim'$suf $OUTtrim/${nf}'_2_trim_orph'$suf ILLUMINACLIP:$ADAPTp:2:30:10:4 SLIDINGWINDOW:5:20 AVGQUAL:20 MINLEN:36 >> "${nf}.sh"
        echo mkdir $OUTaln/${nf} >> "${nf}.sh"
        echo cd $OUTaln/${nf} >> "${nf}.sh"
        echo $STAR --twopassMode Basic --genomeDir $GENOMEdir --readFilesIn $OUTtrim/${nf}'_1_trim'$suf $OUTtrim/${nf}'_2_trim'$suf --readFilesCommand zcat --runRNGseed 777 --outFileNamePrefix "${nf}_" --outSAMtype BAM Unsorted SortedByCoordinate --quantMode TranscriptomeSAM GeneCounts --runThreadN 12 >> "${nf}.sh"
	if [ "$salmon" == "true" ]; then
          if [ $LIB == PE ]; then
          slib=IU
          elif [ $LIB == SE ]; then
          slib=U
          fi
          echo $SALMON quant -t $GENOMEdir/transcriptome.fa -l $slib -a "${nf}_Aligned.out.bam" -o $OUTaln/${nf}/salmon_quant >> "${nf}.sh"
          echo mv $OUTaln/${nf}/salmon_quant/quant.sf $OUTaln/${nf}/salmon_quant/"${nf}_quant.sf" >> "${nf}.sh"
	fi
	echo exit 0 >> "${nf}.sh"
	qsub -l qname=Virtual "${nf}.sh"
        sleep 0.1
	#cat "${nf}.sh"
        rm "${nf}.sh"
done
}

# unziped fastq code blocks
function _SEsuZ {
for i in $DATA/*_1$suf; do
        nf=$(basename $i _1.fastq)
        echo "working with $nf"
        echo $OUTaln/$nf/Log.final.out >> $OUTaln/index
        java -jar $TRIMO SE -threads 12 -phred33 -trimlog $OUTtrim/"${nf}.trimlog" $DATA/${nf}'_1'$suf $OUTtrim/${nf}'_1_trim'$suf ILLUMINACLIP:$ADAPTs:2:30:10:4 SLIDINGWINDOW:5:20 AVGQUAL:20 MINLEN:36
        mkdir $OUTaln/${nf}
        cd $OUTaln/${nf}
        $STAR --twopassMode Basic --genomeDir $GENOMEdir --readFilesIn $OUTtrim/${nf}'_1_trim'$suf --runRNGseed 777 --outFileNamePrefix "${nf}_" --outSAMtype BAM Unsorted SortedByCoordinate --quantMode TranscriptomeSAM GeneCounts --runThreadN 12
        if [ "$salmon" == "true" ]; then
        echo "Running Salmon transcript quantification..."
          if [ $LIB == PE ]; then
          slib=IU
          elif [ $LIB == SE ]; then
          slib=U
          fi
          $SALMON quant -t $GENOMEdir/transcriptome.fa -l $slib -a "${nf}_Aligned.out.bam" -o $OUTaln/${nf}/salmon_quant
          mv $OUTaln/${nf}/salmon_quant/quant.sf $OUTaln/${nf}/salmon_quant/"${nf}_quant.sf"
	fi
	cd ..
done
}

function _PEsuZ {
for i in $DATA/*_1$suf; do
        nf=$(basename $i _1.fastq)
        echo "working with $nf"
        echo $OUTaln/$nf/Log.final.out >> $OUTaln/index
        java -jar $TRIMO PE -threads 12 -phred33 -trimlog $OUTtrim/"${nf}.trimlog" $DATA/${nf}'_1'$suf $DATA/${nf}'_2'$suf $OUTtrim/${nf}'_1_trim'$suf $OUTtrim/${nf}'_1_trim_orph'$suf $OUTtrim/${nf}'_2_trim'$suf $OUTtrim/${nf}'_2_trim_orph'$suf ILLUMINACLIP:$ADAPTp:2:30:10:4 SLIDINGWINDOW:5:20 AVGQUAL:20 MINLEN:36
        mkdir $OUTaln/${nf}
        cd $OUTaln/${nf}
        $STAR --twopassMode Basic --genomeDir $GENOMEdir --readFilesIn $OUTtrim/${nf}'_1_trim'$suf $OUTtrim/${nf}'_2_trim'$suf --runRNGseed 777 --outFileNamePrefix "${nf}_" --outSAMtype BAM Unsorted SortedByCoordinate --quantMode TranscriptomeSAM GeneCounts --runThreadN 12
        if [ "$salmon" == "true" ]; then
        echo "Running Salmon transcript quantification..."
          if [ $LIB == PE ]; then
          slib=IU
          elif [ $LIB == SE ]; then
          slib=U
          fi
          $SALMON quant -t $GENOMEdir/transcriptome.fa -l $slib -a "${nf}_Aligned.out.bam" -o $OUTaln/${nf}/salmon_quant
          mv $OUTaln/${nf}/salmon_quant/quant.sf $OUTaln/${nf}/salmon_quant/"${nf}_quant.sf"
	fi
	cd ..
done
}

function _SEuZ {
for i in $DATA/*_1$suf; do
        nf=$(basename $i _1.fastq)
        echo "working with $nf"
        echo $OUTaln/$nf/Log.final.out >> $OUTaln/index
        echo "#!/bin/bash" > "${nf}.sh"
        echo "source ~/.bash_profile" >> "${nf}.sh"
        echo java -jar $TRIMO SE -threads 12 -phred33 -trimlog $OUTtrim/"${nf}.trimlog" $DATA/${nf}'_1'$suf $OUTtrim/${nf}'_1_trim'$suf ILLUMINACLIP:$ADAPTs:2:30:10:4 SLIDINGWINDOW:5:20 AVGQUAL:20 MINLEN:36 >> "${nf}.sh"
        echo mkdir $OUTaln/${nf} >> "${nf}.sh"
        echo cd $OUTaln/${nf} >> "${nf}.sh"
        echo $STAR --twopassMode Basic --genomeDir $GENOMEdir --readFilesIn $OUTtrim/${nf}'_1_trim'$suf --runRNGseed 777 --outFileNamePrefix "${nf}_" --outSAMtype BAM Unsorted SortedByCoordinate --quantMode TranscriptomeSAM GeneCounts --runThreadN 12 >> "${nf}.sh"
        if [ "$salmon" == "true" ]; then
          if [ $LIB == PE ]; then
          slib=IU
          elif [ $LIB == SE ]; then
          slib=U
          fi
          echo $SALMON quant -t $GENOMEdir/transcriptome.fa -l $slib -a "${nf}_Aligned.out.bam" -o $OUTaln/${nf}/salmon_quant >> "${nf}.sh"
          echo mv $OUTaln/${nf}/salmon_quant/quant.sf $OUTaln/${nf}/salmon_quant/"${nf}_quant.sf" >> "${nf}.sh"
	fi
	echo exit 0 >> "${nf}.sh"
	qsub -l qname=Virtual "${nf}.sh"
        sleep 0.1
	#cat "${nf}.sh"
        rm "${nf}.sh"
done
}

function _PEuZ {
for i in $DATA/*_1$suf; do
        nf=$(basename $i _1.fastq)
        echo "working with $nf"
        echo $OUTaln/$nf/Log.final.out >> $OUTaln/index
        echo "#!/bin/bash" > "${nf}.sh"
        echo "source ~/.bash_profile" >> "${nf}.sh"
        echo java -jar $TRIMO PE -threads 12 -phred33 -trimlog $OUTtrim/"${nf}.trimlog" $DATA/${nf}'_1'$suf $DATA/${nf}'_2'$suf $OUTtrim/${nf}'_1_trim'$suf $OUTtrim/${nf}'_1_trim_orph'$suf $OUTtrim/${nf}'_2_trim'$suf $OUTtrim/${nf}'_2_trim_orph'$suf ILLUMINACLIP:$ADAPTp:2:30:10:4 SLIDINGWINDOW:5:20 AVGQUAL:20 MINLEN:36 >> "${nf}.sh"
        echo mkdir $OUTaln/${nf} >> "${nf}.sh"
        echo cd $OUTaln/${nf} >> "${nf}.sh"
        echo $STAR --twopassMode Basic --genomeDir $GENOMEdir --readFilesIn $OUTtrim/${nf}'_1_trim'$suf $OUTtrim/${nf}'_2_trim'$suf --runRNGseed 777 --outFileNamePrefix "${nf}_" --outSAMtype BAM Unsorted SortedByCoordinate --quantMode TranscriptomeSAM GeneCounts --runThreadN 12 >> "${nf}.sh"
        if [ "$salmon" == "true" ]; then
          if [ $LIB == PE ]; then
          slib=IU
          elif [ $LIB == SE ]; then
          slib=U
          fi
          echo $SALMON quant -t $GENOMEdir/transcriptome.fa -l $slib -a "${nf}_Aligned.out.bam" -o $OUTaln/${nf}/salmon_quant >> "${nf}.sh"
          echo mv $OUTaln/${nf}/salmon_quant/quant.sf $OUTaln/${nf}/salmon_quant/"${nf}_quant.sf" >> "${nf}.sh"
	fi
	echo exit 0 >> "${nf}.sh"
	qsub -l qname=Virtual "${nf}.sh"
        #cat "${nf}.sh"
        sleep 0.1
	rm "${nf}.sh"
done
}

# pipeline code blocks

function _init {
echo "Initialising..."
echo "Raw reads are *$suf"
mkdir $OUT 2> /dev/null 
if [ $? -eq 0 ]; then
  echo "Successfully created output directory"
else
  echo "Could not create output directory" >&2
  exit 1
fi

mkdir $LOG 2> /dev/null
if [ $? -eq 0 ]; then
  echo "Successfully created output directory"
else
  echo "Could not create output directory" >&2
  exit 1
fi

mkdir $GENOMEdir 2> $LOG/RNASeq_pipe.err
if [ $? -eq 0 ]; then
  echo "Successfully created reference directory"
else
  echo "Could not create reference directory" >&2
  cat $LOG/RNASeq_pipe.err
  exit 1
fi

mkdir $OUTtrim 2> $LOG/RNASeq_pipe.err
if [ $? -eq 0 ]; then
  echo "Successfully created trimmed data directory"
else
  echo "Could not create trimmed data directory" >&2
  cat $LOG/RNASeq_pipe.err
  exit 1
fi

mkdir $OUTaln 2> $LOG/RNASeq_pipe.err
if [ $? -eq 0 ]; then
  echo "Successfully created alignment directory"
else
  echo "Could not create alignment directory" >&2
  cat $LOG/RNASeq_pipe.err
  exit 1
fi

ln $GENOME $GENOMEdir 2> $LOG/RNASeq_pipe.err
if [ $? -eq 0 ]; then
  echo "Successfully linked reference"
else
  echo "Could not link reference" >&2
  cat $LOG/RNASeq_pipe.err
  exit 1
fi

ln $ANNOTS $GENOMEdir 2> $LOG/RNASeq_pipe.err
if [ $? -eq 0 ]; then
  echo "Successfully linked annotations"
else
  echo "Could not link annotations" >&2
  cat $LOG/RNASeq_pipe.err
  exit 1
fi

touch $OUTaln/index 2> $LOG/RNASeq_pipe.err
if [ $? -eq 0 ]; then
  echo "Successfully created sample index file"
else
  echo "Could create sample index file" >&2
  cat $LOG/RNASeq_pipe.err
  exit 1
fi
}

#### gff or gtf check, process annotations and reference for Salmon and STAR
#### check to see if index already exists for the specified reference - if not build

function _index {

ref_path=$(dirname $GENOME)
ref_file=$(head -n 3 $GENOMEdir/genomeParameters.txt | tail -n 1  | awk '{print $2}') 
ref_file2=$(head -n 3 $ref_path/genomeParameters.txt | tail -n 1 | awk '{print $2}')
ref_file2name=$(basename $ref_file2)
ref_name=$(basename $GENOME)
ann_format=$(basename $ANNOTS | sed 's/.*\.//')
ann_dir=$(dirname $ANNOTS )

#determine annotation format and change to gtf for STAR if needed
if [ "$ann_format" = "gff" ]; then
	an=$(basename $ANNOTS .gff)
	an_format_new=gtf
	echo "Annotations are in gff format"
	$GFFREAD $ann_dir/$an'.'$ann_format -T -o $GENOMEdir/$an'.'$an_format_new 2> $LOG/gffread-build.err
	  if [ $? -eq 0 ]; then
            echo "Converting to gtf for STAR"
          else
            echo "error with converting annotation file" >&2
            cat $LOG/gffread-build.err;  exit 1
          fi
elif [ "$ann_format" = "gff3" ]; then
	an=$(basename $ANNOTS .gff3)
	an_format_new=gtf
	echo "Annotations are in gff format"
        $GFFREAD $ann_dir/$an'.'$ann_format -T -o $GENOMEdir/$an'.'$an_format_new 2> $LOG/gffread-build.err
	  if [ $? -eq 0 ]; then
            echo "Converting to gtf for STAR"
          else
            echo "error with converting annotation file" >&2
            cat $LOG/gffread-build.err;  exit 1
          fi
elif [ "$ann_format" = "gtf" ]; then
	an=$(basename $ANNOTS .gtf)
	an_format_new=$ann_format
	echo "Annotations are in gtf format"
else
	echo "Cannot determine annotation format, only *.gtf or *.gff supported" >&2
fi

# get transcriptome if using salmon quantification - they both map to the same things so this just generates the .fa file needed by salmon
if [ "$transcriptome" == "true" ]; then
	an=$(basename $ANNOTS '.'$ann_format)
	echo "Building transcripts for transcriptome alignment"
        $GFFREAD -w $GENOMEdir/transcriptome.fa -g $GENOME $ann_dir/$an'.'$ann_format 2> $LOG/gffread-build.err
	if [ $? -eq 0 ]; then
            echo "Successfully built transcripts"
        else
            echo "Could not build transcripts..." >&2
            cat $LOG/gffread-build.err;  exit 1
        fi
elif [ "$salmon" == "true" ]; then
	an=$(basename $ANNOTS '.'$ann_format)
	echo "Building transcripts to be used in Salmon quantification"
        $GFFREAD -w $GENOMEdir/transcriptome.fa -g $GENOME $ann_dir/$an'.'$ann_format 2> $LOG/gffread-build.err
	if [ $? -eq 0 ]; then
            echo "Successfully built transcripts"
        else
            echo "Could not build transcripts..." >&2
            cat $LOG/gffread-build.err;  exit 1
        fi
fi

# STAR reference index check and building
if [ "$transcriptome" == "false" ]; then
	an=$(basename $ANNOTS '.'$ann_format)
	echo "Checking for pre-built STAR genome reference index"
	if [ -f $GENOMEdir/Genome ] && [ $GENOME == "$ref_file" ]; then
		echo "Reference index already built"
		echo "using it instead of rebuilding..."
	elif [ -f "$ref_path"/Genome ] && [ $ref_name == "$ref_file2name" ]; then
		echo "Reference index already built"
		echo "using it instead of rebuilding..."
		cp --symbolic-link $ref_path/* $GENOMEdir 2> $LOG/RNASeq_pipe.err
	else
		echo "Could not find index"
		echo "Building it from scratch instead..."
        	$STAR --runMode genomeGenerate --genomeDir $GENOMEdir --limitGenomeGenerateRAM 81000000000000 --genomeFastaFiles $GENOME --sjdbGTFfile $GENOMEdir/$an'.gtf' --runThreadN 12 2> $LOG/STAR-genomeGenerate.err
	  	if [ $? -eq 0 ]; then
  	    	  echo "Successfully built reference index"
	  	else
  	    	  echo "Could not build reference index..." >&2
	    	  cat $LOG/STAR-genomeGenerate.err;  exit 1
		fi
 	fi  
elif [ "$transcriptome" == "true" ]; then
	echo "Checking for pre-built STAR reference index"
	if [ -f $GENOMEdir/Genome ] && [ $GENOME == "$ref_file" ]; then
                echo "Reference index already built"
                echo "using it instead of rebuilding..."
        elif [ -f "$ref_path"/Genome ] && [ $ref_name == "$ref_file2name" ]; then
                echo "Reference index already built"
                echo "using it instead of rebuilding..."
                cp --symbolic-link $ref_path/* $GENOMEdir 2> $LOG/RNASeq_pipe.err
        else
                echo "Could not find index"
                echo "Building it from scratch instead..."
                $STAR --runMode genomeGenerate --genomeDir $GENOMEdir --limitGenomeGenerateRAM 81000000000000 --genomeFastaFiles $GENOME --sjdbGTFfile $GENOMEdir/$an'.gtf' --runThreadN 12 2> $LOG/STAR-genomeGenerate.err
                if [ $? -eq 0 ]; then
                  echo "Successfully built reference index"
                else
                  echo "Could not build reference index..." >&2
                  cat $LOG/STAR-genomeGenerate.err;  exit 1
                fi
        fi
fi
}

#### check on cluster jobs and print complete status

function _jobCheck {
a=$(wc $OUTaln/index | awk '{print $1}') 
while true ; do
       b=$(find $OUTaln/*/ -type f -name "*_Log.final.out" | wc | awk '{print $1}' 2> $LOG/RNASeq_pipe.err)
       echo $b out of $a files complete
       if (($a == $b))
       then
               break
       else 
               sleep 300
       fi
done
}

#### collate counts

function _CollateCounts {
if [ "$collate" = "true" ]; then
	echo "Collating counts"
	if [ "$salmon" == "true" ]; then
		echo 'setwd("'$OUT'")' > $OUT/CollateCounts.R
                echo "ls <- list.files(recursive = TRUE, full.names = TRUE)" >> $OUT/CollateCounts.R
                echo 'files <- ls[grepl("*quant.sf", ls)] ' >> $OUT/CollateCounts.R
                echo "cts <- lapply(files, read.delim, skip = 1, header = FALSE, row.names = 1)" >> $OUT/CollateCounts.R
                echo 'merged <- do.call("cbind", lapply(cts, function(x) x[, 4, drop = FALSE]))' >> $OUT/CollateCounts.R
                echo "colnames(merged) <- basename(files)" >> $OUT/CollateCounts.R
                echo 'write.csv(merged, "allSalmonQuant.csv")' >> $OUT/CollateCounts.R
                $R < $OUT/CollateCounts.R --vanilla
		echo "The combined salmon transcript-level count  matrix is $OUT/allSalmonQuant.csv"
	elif [ "$salmon" == "false" ]; then
		echo 'setwd("'$OUT'")' > $OUT/CollateCounts.R
		echo "ls <- list.files(recursive = TRUE, full.names = TRUE)" >> $OUT/CollateCounts.R
		echo 'files <- ls[grepl("*ReadsPerGene.out.tab", ls)] ' >> $OUT/CollateCounts.R
		echo "cts <- lapply(files, read.delim, skip = 4, header = FALSE, row.names = 1)" >> $OUT/CollateCounts.R
		echo 'merged <- do.call("cbind", lapply(cts, function(x) x[, 1, drop = FALSE]))' >> $OUT/CollateCounts.R
		echo "colnames(merged) <- basename(files)" >> $OUT/CollateCounts.R
		echo 'write.csv(merged, "allReadsPerGene.csv")' >> $OUT/CollateCounts.R
		$R < $OUT/CollateCounts.R --vanilla
                echo "The combined count matrix is $OUT/allReadsPerGene.csv"
	fi
fi
}

function _run {
if [ $cluster == false ] && [[ $suf == .fastq ]]; then
	if [ $LIB == SE ]; then
          echo "Running pipeline in SE mode on this machine"
	  _SEsuZ
	elif [ $LIB == PE ]; then
          echo "Running pipeline in PE mode on this machine"
	  _PEsuZ
	else
          echo "ERROR: could not submit pipeline jobs - incorrect parameters set" >&2
	  exit 1
	fi
elif [ $cluster == false ] && [[ $suf == .fastq.gz ]]; then
        if [ $LIB == SE ]; then
          echo "Running pipeline in SE mode on this machine"
          _SEsZ
        elif [ $LIB == PE ]; then
          echo "Running pipeline in PE mode on this machine"
          _PEsZ
        else
          echo "ERROR: could not submit pipeline jobs - incorrect parameters set" >&2
	  exit 1
        fi
elif [ $cluster == true ] && [[ $suf == .fastq ]]; then
	if [ $LIB == SE ]; then
          echo "Running pipeline in SE mode on the cluster"
	  _SEuZ
	elif [ $LIB == PE ]; then
          echo "Running pipeline in PE mode on the cluster"
	  _PEuZ
	else
          echo "ERROR: could not submit pipeline jobs - incorrect parameters set" >&2
	  exit 1
	fi
elif [ $cluster == true ] && [[ $suf == .fastq.gz ]]; then
        if [ $LIB == SE ]; then
          echo "Running pipeline in SE mode on the cluster"
          _SEZ
        elif [ $LIB == PE ]; then
          echo "Running pipeline in PE mode on the cluster"
          _PEZ
        else
          echo "ERROR: could not submit pipeline jobs - incorrect parameters set" >&2
          exit 1
        fi
fi
}


#### pipeline

function _pipe {
echo "RNASeq_pipe: An automated RNA-Seq analysis pipeline
User options selected:

RNASeq_pipe $Options
"
_init
_index
_run
if [ $cluster == true ]; then
	_jobCheck
	echo "STAR Alignments finished"
	echo "Tidying up..."
	rm ~/*.sh.*
	rm $OUT/*.sh
elif [ $cluster == false ]; then
	echo "STAR Alignments finished"
fi
_CollateCounts
echo "Pipeline finished - please check individual sample *Log.final.out files just to make sure it worked"
}

## run the pipeline

_pipe

exit 0
